name: PickLab BE Workflow
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Test tags'
permissions:
  contents: read

jobs:
  docker-build-push-deploy:
    name: Create Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: build docker
        run: ./gradlew bootBuildImage --imageName=${{ secrets.DOCKER_REPO }}:${{ github.sha }}

      - name: Tag Version
        run: |
          docker tag ${{ secrets.DOCKER_REPO }}:${{ github.sha }} ${{ secrets.DOCKER_REPO }}:latest

      - name: Publish Docker Images
        run: |
          docker push ${{ secrets.DOCKER_REPO }}:latest
          docker push ${{ secrets.DOCKER_REPO }}:${{ github.sha }}

      - name: Google Auth
        id: "auth"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: ${{ secrets.GCE_SA_KEY }}

      - name: set up Cloud SDK
        uses: "google-github-actions/setup-gcloud@v1"
        with:
          project_id: ${{ secrets.GCE_PROJECT_ID }}

      - name: use gcloud cli
        run: "gcloud info"

      - name: Deploy to GCE VM Instance
        run: |
          gcloud compute ssh ${{ secrets.GCE_INSTANCE_NAME }} \
            --zone=${{ secrets.GCE_INSTANCE_ZONE }} \
            --command="\
              docker stop ${{ secrets.APP_NAME }} || true && \
              docker rm ${{ secrets.APP_NAME }} || true && \
              docker rmi ${{ secrets.DOCKER_REPO }}:${{ github.sha }} || true && \
              docker pull ${{ secrets.DOCKER_REPO }}:${{ github.sha }} && \
              docker run -d --name ${{ secrets.APP_NAME }} \
                --env-file ${{ secrets.ENV_FILE_LOCATION }} \
                -v /etc/localtime:/etc/localtime:ro \
                -e TZ=Asia/Seoul \
                -p 8080:8080 \
                --memory=1g --memory-swap=1g \
                ${{ secrets.DOCKER_REPO }}:${{ github.sha }} && \
              docker image prune -f"
